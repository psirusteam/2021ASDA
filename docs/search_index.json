[["index.html", "Análisis de encuestas con R Prefacio", " Análisis de encuestas con R Andrés Gutiérrez1, Cristian Téllez2, Stalyn Guerrero3 2023-03-09 Prefacio La versión online de este libro está licenciada bajo una Licencia Internacional de Creative Commons para compartir con atribución no comercial 4.0. Este libro es el resultado de un compendio de las experiencias internacionales prácticas adquiridas por el autor como Experto Regional en Estadísticas Sociales de la CEPAL. Experto Regional en Estadísticas Sociales - Comisión Económica para América Latina y el Caribe (CEPAL) - andres.gutierrez@cepal.org↩︎ Profesor - Universidad Santo Tomás - cristiantellez@usta.edu.co↩︎ Consultor - Comisión Económica para América Latina y el Caribe (CEPAL), guerrerostalyn@gmail.com↩︎ "],["introducción.html", "Capítulo 1 Introducción", " Capítulo 1 Introducción FALTA ESTO: BADEHOG en la Cepal Las encuestas de hogares son uno de los instrumentos más importantes para hacer seguimiento a los indicadores de los Objetivos de Desarrollo Sostenible (ODS, por sus siglas) en el marco de la agenda 2030. Dada la importancia que tiene estas encuestas en la política pública de cada país, es necesario que los resultados que se obtengan de ellas sean lo más precisos y confiables posibles. En este sentido, las herramientas estadísticas utilizadas para obtener dichos resultados deben ser lo más robustas posibles. Particularmente, el diseño de muestreo utilizando, sin lugar a dudas, es un diseño de muestreo complejo. Entiéndase esto como como aquello diseños de muestreo en los cuales las unidades experimentales no pueden ser seleccionadas directamente del marco. Es decir, aquellos diseños que contienen más de una etapa, estratificación, conglomerados, etc. El objetivo principal de este libro es presentar los conceptos necesarios para hacer un análisis de encuestas complejas enfocadas en las dinámicas de los hogares. Particularmente, se presenta una guía práctica para analizar encuestas complejas usando R. Es por esto que, la dinámica que se trabaja en este texto es guiar al lector a cómo realizar un análisis completo de una encuesta compleja usando el software estadístico R con el paquete survey. En ese sentido, todos los ejemplos, tablas y gráficos que se presentan en este libro se producen con R, y los códigos computacionales para reproducir estarán disponibles para replicarlos. Se decide utilizar el software estadístico R para hacer los análisis puesto que, es un software de código abierto, lo que permite que cualquier investigador o instituto estadístico tenga acceso a él y es muy conocido y utilizado por el gremio estadístico, lo que lo hace conveniente para la enseñanza. El lector encontrará en este texto la siguiente estructura. En el capítulo 2 se describen los conceptos básicos de una encuesta compleja fundamentales para la correcta definición del diseño muestral en el entorno de las encuestas de hogares. En el capítulo 3 y 4 se definen los conceptos de variables aleatoria continua y discretas respectivamente en el contexto del muestreo probabilístico y, en el capítulo 5 se muestra como ajustar modelos de regresión lineal utilizando variables discretas y continuas empleando las herramientas del muestreo probabilístico. En el capítulo 6 se presentan las herramientas para ajustar modelos de regresión logística los cuales son fundamentales en el análisis de encuestas de hogares. Ahora bien, en los análisis estadísticos no solo son requeridos los modelos de regresión lineales, también, por la misma naturaleza de las variables capturadas en una encuesta de hogares, es necesario el ajuste de modelos lineales generalizados y multiniveles, estos conceptos son trabajados en el capítulo 7 y 8 respectivamente. Ahora bien, dada la pandemia la no respuesta en encuestas de hogares a aumentado de manera importante en los últimos años por lo que, es necesario recurrir a técnicas de imputación para la información no capturada en el trabajo de campo. Esta temática es trabajada en el capítulo 9. Por último, la presentación gráfica de los resultados en una encuesta de hogares será abordada en el capítulo 10. "],["conceptos-básicos-en-encuestas-de-hogares.html", "Capítulo 2 Conceptos básicos en encuestas de hogares", " Capítulo 2 Conceptos básicos en encuestas de hogares En este capítulo se presentan los conceptos básicos necesarios para la definición y análisis de una encuesta de hogares y son tomadas de Sarndal, Swensson &amp; Wretman (1992) &amp; Gutiérrez (2016). Alguno de los conceptos que se encontrarán están relacionados con la población objetivo, universo de estudio, marco muestral, etc. "],["universo-de-estudio-y-población-objetivo.html", "2.1 Universo de estudio y población objetivo", " 2.1 Universo de estudio y población objetivo El término encuesta se encuentra directamente relacionado con una población finita compuesta de individuos a los cuales es necesario entrevistar. El universo de estudio lo constituye el total de individuos o elementos que poseen dichas características a ser estudiadas. Ahora bien, conjunto de unidades de interés sobre los cuales se tendrán resultados recibe el nombre de población objetivo. Por ejemplo, la Encuesta Nacional de Empleo y Desempleo de Ecuador define su población objetivo como todas las personas mayores de 10 años residentes en viviendas particulares en Ecuador. "],["unidades-de-análisis.html", "2.2 Unidades de análisis", " 2.2 Unidades de análisis Corresponden a los diferentes niveles de desagregación establecidos para consolidar el diseño probabilístico y sobre los que se presentan los resultados de interés. En México, la Encuesta Nacional de Ingresos y Gastos de los Hogares define como unidades de análisis el ámbito al que pertenece la vivienda, urbano alto, complemento urbano y rural. La Gran Encuesta Integrada de Hogres de Colombia tiene cobertura nacional y sus unidades de análisis están definidas por 13 grandes ciudades junto con sus áreas metropolitanas. "],["unidades-de-muestreo.html", "2.3 Unidades de muestreo", " 2.3 Unidades de muestreo El diseño de una encuesta de hogares en América Latina plantea la necesidad de seleccionar en varias etapas ciertas unidades de muestreo que sirven como medio para seleccionar finalmente a los hogares que participarán de la muestra. La Pesquisa Nacional por Amostra de Domicilios en Brasil se realiza por medio de una muestra de viviendas en tres etapas, cada etapa se define como una unidad de muestreo. Por ejemplo, las unidades de muestreo en PNAD son: Las unidades primarias de muestreo (UPM) son los municipios, Las unidades secundarias de muestreo (USM) son los sectores censales, que conforman una malla territorial conformada en el último Censo Demográfico. Las últimas unidades en ser seleccionadas son las viviendas. "],["marcos-de-muestreo.html", "2.4 Marcos de muestreo", " 2.4 Marcos de muestreo Para realizar el proceso de selección sistemática de los hogares es necesario contar con un marco de muestreo que sirva de link entre los hogares y las unidades de muestreo y que permita tener acceso a la población de interés. En este sentido, el marco muestral es el conjunto en el cual se identifican a todos los elementos que componen la población objeto de estudio, de la cual se selecciona la muestra. Los marcos de muestreo más utilizados en encuestas complejas son de áreas geográficas que vinculan directamente a los hogares o personas. A modo de ejemplo, la Encuesta Nacional de Hogares de Costa Rica utiliza un marco muestral construido a partir de los censos nacionales de población y vivienda de 2011. Dicho marco corresponde a uno de áreas en donde sus unidades son superficies geográficas asociadas con las viviendas. Este marco permite la definición de UPM con 150 viviendas en las zonas urbanas y 100 viviendas en las zonas rurales. Este marco está conformado por 10461 UPM (64.5% urbanas y 35.5% rurales). "],["selección-de-una-muestra.html", "2.5 Selección de una muestra", " 2.5 Selección de una muestra "],["motivación.html", "2.6 Motivación", " 2.6 Motivación Desde que se popularizaron las encuestas de hogares en 1940, se ha hecho evidente algunas tendencias que están ligadas a los avances tecnológicos en las agencias estadísticas y en la sociedad y se han acelerado con la introducción del computador. Gambino &amp; Silva (2009) El muestreo es un procedimiento que responde a la necesidad de información estadística precisa sobre una población objetivo de estudio; Como lo menciona Gutiérrez (2016) el muestreo trata con investigaciones parciales sobre la población que apuntan a inferir a la población completa. Es así como en las últimas décadas ha tenido bastante desarrollo en diferentes campos principalmente en el sector gubernamental con la publicación de las estadísticas oficiales que permiten realizar un seguimiento a las metas del gobierno, en el sector académico, en el sector privado y de comunicaciones. Como se ha venido mencionando anteriormente, este libro está enfocado en el análisis de las encuestas de hogares. En ese sentido y para que el lector tenga una gama más amplia de ejemplos, en este capítulo se utilizará, para los ejemplos computacionales, la base de datos BigCity. Esta base es un conjunto de datos que contiene algunas variables socioeconómicas de \\(150266\\) personas de una ciudad en un año en particular. Alguna de las variables de esta base de datos son: HHID: Corresponde al identificador del hogar. PersonID: Corresponde al identificador de la persona dentro del hogar. Stratum: Corresponde al estrato geográfico del hogar. Son 119 estratos. PSU: Corresponde a las unidades primarias de muestreo. La base de datos cuenta con \\(1664\\) PSU. Zone: Corresponde a las áreas urbanas o rurales a lo largo de la ciudad. Sex: Corresponde al sexo del entrevistado. Income: Corresponde a los ingresos mensual per cápita. Expenditure: Corresponde a los gastos mensual per cápita. Employment: Situación laboral de la persona entrevistada. Poverty: Esta variable indica si la persona es pobre o no. Depende de los ingresos. "],["muestreo-aleatorio-simple-en-dos-etapas-estratificado.html", "2.7 Muestreo aleatorio simple en dos etapas estratificado", " 2.7 Muestreo aleatorio simple en dos etapas estratificado Con la finalidad de mantener un equilibrio entre los costos económicos y las propiedades estadísticas de la estrategia de muestreo se puede aprovechar la homogeneidad dentro de los conglomerados y, así, no tener que realizar censos dentro de cada Unidad Primaria de Muestreo (UPM) sino, proceder a seleccionar una sub-muestra dentro del conglomerado seleccionado. Los diseños de muestreo en las encuestas de hogares se caracterizan por ser diseños complejos los cuales involucran, entre otras, más de una etapa en la selección de las unidades de observación, estratos y estimadores complejos. En su mayoría, las unidades primarias de muestreo son seleccionadas dentro de los estrato. Ahora bien, según la teoría de muestreo (Cochran, W. G., 1977) se asume que el muestreo en cada estrato respeta el principio de la independencia. Esto es, las estimaciones del total, así como el cálculo y estimación de la varianza son el resultado de añadir o sumar para cada estrato la respectiva cantidad. Dentro de cada estrato \\(U_h\\) con \\(h=1,\\ldots, H\\) existen \\(N_{Ih}\\) unidades primarias de muestreo, de las cuales se selecciona una muestra \\(s_{Ih}\\) de tamaño \\(n_{Ih}\\) mediante un diseño de muestreo aleatorio simple. Suponga, además que el sub-muestreo dentro de cada unidad primaria seleccionada es también aleatorio simple. En este sentido, para cada unidad primaria de muestreo seleccionada \\(i\\in s_{Ih}\\) de tamaño \\(N_i\\) se selecciona una muestra \\(s_i\\) de elementos de tamaño \\(n_i\\). Como es ampliamente conocido, el proceso de estimación de un parámetro particular, por ejemplo, la media de los ingresos consiste en multiplicar la observación obtenida en la muestra por su respectivo factor de expansión y dividirlo sobre la suma de los factores de expansión de acuerdo con el nivel de desagregación que se quiera estimar. Sin embargo, cuando el diseño es complejo como es el caso de las encuestas de hogares, la estimación de la varianza se torna un poco difícil de realizar utilizando ecuaciones cerradas. Para estos casos y como lo recomienda la literatura especializada (Hansen, M. H., &amp; Steinberg, J., 1956)), se procede a utilizar la técnica del último conglomerado. Esta técnica consiste en aproximar la varianza sólo teniendo en cuenta la varianza de los estimadores en la primera etapa. Para esto se debe suponer que el diseño de muestreo fue realizado con reemplazo. Para poder utilizar los principios de estimación del último conglomerado en las encuestas de hogares se definen las siguientes cantidades: \\(d_{I_i} = \\dfrac{N_{Ih}}{n_{Ih}}\\), que es el factor de expansión de la \\(i\\)-ésima UPM en el estrato \\(h\\). \\(d_{k|i} = \\dfrac{N_{i}}{n_{i}}\\), que es el factor de expansión del \\(k\\)-ésimo hogar para la \\(i\\)-ésima UPM. \\(d_k = d_{I_i} \\times d_{k|i} = \\dfrac{N_{Ih}}{n_{Ih}} \\times \\dfrac{N_{i}}{n_{i}}\\), que es el factor de expansión final del \\(k\\)-ésimo elemento para toda la población \\(U\\). "],["práctica-en-r.html", "2.8 Práctica en R", " 2.8 Práctica en R En esta sección se utilizarán las funciones estudiadas en el capítulo anterior para la manipulación de la base de datos de ejemplo. Inicialmente, se cargarán las librerías ggplot2 que permitirá generar gráficos de alta calidad en R, TeachingSampling que permite tomar muestras probabilísticas utilizando los diseños de muestreo usuales, survey y srvyr que permitirán definir los diseños muestrales y por último dplyr que permite la manipulación de las bases de datos. library(ggplot2) library(TeachingSampling) library(dplyr) library(survey) library(srvyr) Una vez cargada las librerías, se procede a calcular la cantidad de personas en la base de datos, el total de ingresos y total de gastos para cada UPM dentro de cada estrato: data(&#39;BigCity&#39;) FrameI &lt;- BigCity %&gt;% group_by(PSU) %&gt;% summarise(Stratum = unique(Stratum), Persons = n(), Income = sum(Income), Expenditure = sum(Expenditure)) attach(FrameI) head(FrameI, 10) PSU Stratum Persons Income Expenditure PSU0001 idStrt001 118 70911.72 44231.78 PSU0002 idStrt001 136 68886.60 38381.90 PSU0003 idStrt001 96 37213.10 19494.78 PSU0004 idStrt001 88 36926.46 24030.74 PSU0005 idStrt001 110 57493.88 31142.36 PSU0006 idStrt001 116 75272.06 43473.28 PSU0007 idStrt001 68 33027.84 21832.66 PSU0008 idStrt001 136 64293.02 47660.02 PSU0009 idStrt001 122 33156.14 23292.16 PSU0010 idStrt002 70 65253.78 37114.76 Ahora bien, para calcular los tamaños poblacionales de los estratos (NIh) y los tamaños de muestra dentro de cada estrato (nIh), se realiza de la siguiente manera: sizes = FrameI %&gt;% group_by(Stratum) %&gt;% summarise(NIh = n(), nIh = 2, dI = NIh/nIh) NIh &lt;- sizes$NIh nIh &lt;- sizes$nIh head(sizes, 10) Stratum NIh nIh dI idStrt001 9 2 4.5 idStrt002 11 2 5.5 idStrt003 7 2 3.5 idStrt004 13 2 6.5 idStrt005 11 2 5.5 idStrt006 5 2 2.5 idStrt007 14 2 7.0 idStrt008 7 2 3.5 idStrt009 8 2 4.0 idStrt010 8 2 4.0 Si se desea extraer una muestra probabilística bajo un diseño aleatorio simple estratificado, se procede a utilizar la función S.STSI de la librería TeachingSampling como se muestra a continuación: samI &lt;- S.STSI(Stratum, NIh, nIh) UI &lt;- levels(as.factor(FrameI$PSU)) sampleI &lt;- UI[samI] Ahora bien, con la función left_join se procede a pegar los tamaños muestrales a aquellas UPM’s que fueron seleccionadas en la muestra: FrameII &lt;- left_join(sizes, BigCity[which(BigCity$PSU %in% sampleI), ]) attach(FrameII) Una vez se tiene la base de datos con la muestra de UMP’s. se selecciona aquellas variables que son de inetrés para el estudio como sigue a continuación: head(FrameII, 10) %&gt;% select(Stratum:Zone) Stratum NIh nIh dI HHID PersonID PSU Zone idStrt001 9 2 4.5 idHH00001 idPer01 PSU0001 Rural idStrt001 9 2 4.5 idHH00001 idPer02 PSU0001 Rural idStrt001 9 2 4.5 idHH00001 idPer03 PSU0001 Rural idStrt001 9 2 4.5 idHH00001 idPer04 PSU0001 Rural idStrt001 9 2 4.5 idHH00001 idPer05 PSU0001 Rural idStrt001 9 2 4.5 idHH00002 idPer01 PSU0001 Rural idStrt001 9 2 4.5 idHH00002 idPer02 PSU0001 Rural idStrt001 9 2 4.5 idHH00002 idPer03 PSU0001 Rural idStrt001 9 2 4.5 idHH00002 idPer04 PSU0001 Rural idStrt001 9 2 4.5 idHH00002 idPer05 PSU0001 Rural Luego de tener la información muestral de la primera etapa en la base FrameII se procede a calcular los tamaños de muestra dentro de cada UPM’s. En este caso, a modo de ejemplo, se tomará el 10% del tamaño de la UPM y se utilizará la función ceiling la cual aproxima al siguiente entero. HHdb &lt;- FrameII %&gt;% group_by(PSU) %&gt;% summarise(Ni = length(unique(HHID))) Ni &lt;- as.numeric(HHdb$Ni) ni &lt;- ceiling(Ni * 0.1) sum(ni) ## [1] 704 Teniendo el vector de tamaños de muestra para cada UMP, se procede a realizar la selección mediante un muestreo aleatorio simple con la función S.SI de la librería TeachingSampling. A modo ilustrativo, la selección en la segunda etapa del diseño se realizará, inicialmente para la primera UPM. Posterior a eso, se realizará un ciclo “for” para hacerlo con las demás UPM’s. Para la primera UPM se realiza de la siguiente manera: sam = S.SI(Ni[1], ni[1]) clusterII = FrameII[which(FrameII$PSU == sampleI[1]),] sam.HH &lt;- data.frame(HHID = unique(clusterII$HHID)[sam]) clusterHH &lt;- left_join(sam.HH, clusterII, by = &quot;HHID&quot;) clusterHH$dki &lt;- Ni[1] / ni[1] clusterHH$dk &lt;- clusterHH$dI * clusterHH$dki sam_data = clusterHH head(sam_data, 10) %&gt;% select(Stratum:Zone) Stratum NIh nIh dI PersonID PSU Zone idStrt001 9 2 4.5 idPer01 PSU0001 Rural idStrt001 9 2 4.5 idPer02 PSU0001 Rural idStrt001 9 2 4.5 idPer03 PSU0001 Rural idStrt001 9 2 4.5 idPer04 PSU0001 Rural idStrt001 9 2 4.5 idPer05 PSU0001 Rural idStrt001 9 2 4.5 idPer01 PSU0001 Rural idStrt001 9 2 4.5 idPer02 PSU0001 Rural idStrt001 9 2 4.5 idPer03 PSU0001 Rural idStrt001 9 2 4.5 idPer04 PSU0001 Rural idStrt001 9 2 4.5 idPer05 PSU0001 Rural Para las demás UPM’s seleccionadas en la etapa 1, for (i in 2:length(Ni)) { sam = S.SI(Ni[i], ni[i]) clusterII = FrameII[which(FrameII$PSU == sampleI[i]),] sam.HH &lt;- data.frame(HHID = unique(clusterII$HHID)[sam]) clusterHH &lt;- left_join(sam.HH, clusterII, by = &quot;HHID&quot;) clusterHH$dki &lt;- Ni[i] / ni[i] clusterHH$dk &lt;- clusterHH$dI * clusterHH$dki data1 = clusterHH sam_data = rbind(sam_data, data1) } encuesta &lt;- sam_data attach(encuesta) Una vez se obtiene la muestra (como se mostró anteriormente), el paso siguiente es definir el diseño utilizado y guardarlo como un objeto en R para posteriormente poderlo utilizar y realizar el proceso de estimación de parámetros y cálculo de indicadores. Para realizar esta tarea, se utilizará el paquete srvyr el cual ya fue definido en el capítulo anterior. Para este ejemplo, el diseño de muestreo utilizado fue un estratificado-multietápico en el cual, los estratos correspondieron a la variable Stratum, las UPM’s correspondieron a la variable PSU, los factores de expansión están en la variable dk y por último, se le indica a la función as_survey_design que las UPM’s están dentro de los estrato con el argumento nest = T. A continuación, se presenta el código computacional: diseno &lt;- encuesta %&gt;% as_survey_design( strata = Stratum, ids = PSU, weights = dk, nest = T ) Ya definido el diseño de muestreo como un objeto de R se puede empezar a extraer información del mismo. Por ejemplo, se pueden extraer los pesos de muestreo de dicho diseño con la función weights y luego sumarlos para revisar hasta cuánto me está expandiendo mi muestra. El código es el siguiente: sum(weights(diseno)) ## [1] 153533.5 Como se puede observar, el tamaño poblacional estimado utilizando el diseño propuesto es de \\(140579.2\\). Sin embargo, el tamaño poblacional de la base BigCity es de \\(150266\\). Es normal que esto suceda pero debe ser corregido puesto que la suma de los factores de expansión debe sumar el total de la población. La solución para esto es calibrar los pesos de muestreo que se abordará a continuación. "],["calibrando-con-r.html", "2.9 Calibrando con R", " 2.9 Calibrando con R La calibración es un ajuste que se realiza a los pesos de muestreo con el propósito de que las estimaciones de algunas variables de control reproduzcan de forma perfecta los totales poblacionales de estas variables (Sarndal, 2003). Esta propiedad de consistencia es deseable en un sistema de ponderadores. En este sentido, cuando los estudios por muestreo están afectados por la ausencia de respuesta, como en muchos casos pasa en las encuestas de hogares, es deseable tener las siguientes propiedades en la estructura inferencial que sustenta el muestreo: Sesgo pequeño o nulo. Errores estándares pequeños. Un sistema de ponderación que reproduzca la información auxiliar disponible. Un sistema de ponderación que sea eficiente al momento de estimar cualquier característica de interés en un estudio multipropósito. La calibración es usualmente el último paso en el ajuste de los ponderadores. Hace uso de información auxiliar que reduce la varianza y corrige los problemas de cobertura que no pudieron ser corregidos en los pasos previos. Puesto que el estimador de calibración depende exclusivamente de la información auxiliar disponible, esta información puede aparecer en diversas formas: Puede estar de forma explícita en el marco de unidades. \\(x_k \\ (\\forall \\ k \\in U)\\) Puede ser un agregado poblacional proveniente de un censo o de registros administrativos. \\(t_x = \\sum_U x_k\\) Puede ser una estimación poblacional \\(\\hat{t}_x = \\sum_s w_kx_k\\) muy confiable. Particularmente, en encuestas de hogares, existen conteos de personas disponibles a nivel de desagregaciones de interés. Por ejemplo, número de personas por edad, raza y género que se permite utilizar como información auxiliar para calibrar las estimaciones. La necesidad de calibrar en las encuestas de hogares es porque no todos los grupos de personas se cubren apropiadamente desde el diseño de muestreo. Además, las estimaciones del número de personas en estos subgrupos son menores a las proyecciones que se tienen desde los censos. Por último, al ajustar los pesos para que sumen exactamente la cifra de los conteos censales, se reduce el sesgo de subcobertura. Para ejemplificar el estimador de calibración en R usando la base de datos de ejemplo se utilizarán la función calibrate del paquete survey. En primer lugar, para poder calibrar se requiere construir la información poblacional a la cual se desea calibrar. En este ejemplo se calibrará a nivel de zona y sexo. Por tanto, los totales se obtienen como sigue: library(survey) totales &lt;- colSums( model.matrix(~ -1 + Zone:Sex, BigCity)) En la salida anterior se puede observar que, por ejemplo, en la zona rural hay 37238 mujeres mientras que en la urbana hay 41952. De igual manera se puede leer para el caso de los hombres. Una vez obtenido estos totales, se procede a utilizar la función calibrate para calibrar los pesos de muestreo como sigue: diseno_cal &lt;- calibrate( diseno, ~ -1 + Zone:Sex, totales, calfun = &quot;linear&quot;) Luego de que se hayan calibrado los pesos se puede observar que, al sumar los pesos calibrados estos reproducen el total poblacional de la base de ejemplo. sum(weights(diseno_cal)) ## [1] 150266 encuesta$wk &lt;- weights(diseno_cal) Dado que uno de los principios de los pesos calibrados es que dichos pesos no sean muy diferentes a los pesos originales que provienen del diseño de muestreo, se puede observar a continuación, la distribución de los pesos, sin calibrar y calibrados respectivamente. par(mfrow = c(1,2)) hist(encuesta$dk) hist(encuesta$wk) plot(encuesta$dk,encuesta$wk) Region &lt;- as.numeric( gsub(pattern = &quot;\\\\D&quot;, replacement = &quot;&quot;, x = encuesta$Stratum)) encuesta$Region &lt;- cut(Region, breaks = 5, labels = c(&quot;Norte&quot;,&quot;Sur&quot;,&quot;Centro&quot;,&quot;Occidente&quot;,&quot;Oriente&quot;)) encuesta %&lt;&gt;% mutate( CatAge = case_when( Age &lt;= 5 ~ &quot;0-5&quot;, Age &lt;= 15 ~ &quot;6-15&quot;, Age &lt;= 30 ~ &quot;16-30&quot;, Age &lt;= 45 ~ &quot;31-45&quot;, Age &lt;= 60 ~ &quot;46-60&quot;, TRUE ~ &quot;Más de 60&quot; ), CatAge = factor( CatAge, levels = c(&quot;0-5&quot;, &quot;6-15&quot;, &quot;16-30&quot;, &quot;31-45&quot;, &quot;46-60&quot;, &quot;Más de 60&quot;), ordered = TRUE ) ) saveRDS(object = encuesta, file = &quot;../Curso Tellez/Data/encuesta.rds&quot;) "],["manejando-una-base-de-encuestas-de-hogares-con-r.html", "Capítulo 3 Manejando una base de encuestas de hogares con R ", " Capítulo 3 Manejando una base de encuestas de hogares con R "],["fundamentos-básicos-de-r-y-rstudio.html", "3.1 Fundamentos básicos de R y Rstudio", " 3.1 Fundamentos básicos de R y Rstudio R fue creado en 1992 en Nueva Zelanda por Ross Ihaka y Robert Gentleman. A manera introductoria, R es un software diseñado para realizar análisis estadístico tanto sencillos como complejos. Este software a ganado popularidad en el gremio estadístico y no estadístico puesto que su manejo es sencillo y además, es de libre uso (Puede descargarse en https://www.r-project.org). Es decir, no requiere de ninguna licencia para su utilización. Como lo menciona Santana Sepúlveda, S., &amp; Mateos Farfán, E. (2014) R es un lenguaje de programación de libre distribución, bajo Licencia GNU, y se mantiene en un ambiente para el cómputo estadístico y gráfico. Este software está diseñado para utilizarse en distintos ambientes como, Windows, MacOS o Linux. El concepto de ambiente está enfocado en caracterizarlo como un sistema totalmente planificado y coherente, en lugar de una acumulación gradual de herramientas muy específicas y poco flexibles, como suele ser con otro software de análisis de datos. Ahora bien, como se mencionó anteriormente, R es un lenguaje de programación por ende, su interfase es poco amigable para los que inician en este lenguaje. Por esto, se creó RStudio el cual es un Entorno de Desarrollo Integrado (IDE, por sus siglas en inglés), lo que significa que RStudio es un programa que permite manejar R y utilizarlo de manera más cómoda y agradable. "],["algunas-librerías-de-interés.html", "3.2 Algunas librerías de interés", " 3.2 Algunas librerías de interés Puesto que R es un lenguaje colaborativo el cual permite que la comunidad vaya haciendo aportes al desarrollo de funciones dentro de paquetes o librerías. Alguna de las librerías más usadas para el análisis de bases de datos son las siguientes: dplyr, dplyr es la evolución del paquete plyr, enfocada en herramientas para trabajar con marcos de datos (de ahí la d en el nombre). Según Hadley Wickham, las siguientes son las tres propiedades principales de la librería: Identificar las herramientas de manipulación de datos más importantes necesarias para el análisis de datos y hacerlas fáciles de usar desde R. Proporcionar un rendimiento ultrarrápido para los datos en memoria escribiendo piezas clave en C++. Utilizar la misma interfaz para trabajar con datos sin importar dónde estén almacenados, ya sea en un marco de datos, una tabla de datos o una base de datos.Esta librería permite manejar eficientemente las bases de datos. tidyverse, es una colección de paquetes disponibles en R y orientados a la manipulación, importación, exploración y visualización de datos y que se utiliza exhaustivamente en ciencia de datos. El uso de tidyverse permite facilitar el trabajo estadístico y la generación de trabajos reproducibles. Está compuesto de los siguientes paquetes: readr, dplyr, ggplot2, tibble, tidyr, purr, stringr, forcats readstata13, este paquete permite leer y escribir todos los formatos de archivo de Stata (versión 17 y anteriores) en un marco de datos R. Se admiten las versiones de formato de archivo de datos 102 a 119. para leer las bases de datos de STATA. Además, el paquete admite muchas características del formato Stata dta, como conjuntos de etiquetas en diferentes idiomas o calendarios comerciales. survey, este paquete ha sido elaborado por el Profesor Thomas Lumley (Lumley, T. 2011) y nos proporciona funciones en R útiles para analizar datos provenientes de encuestas complejas.Alguno de los parámetros que se pueden estimar usando este paquete son medias, totales, razones, cuantiles, tablas de contingencias, modelos de regresión, modelos loglineales, entre otros. srvyr, este paquete permite utilizar el operador pipe operators en las consultas que se realizan con el paquete survey. ggplot2, es un paquete de visualización de datos para el lenguaje R que implementa lo que se conoce como la Gramática de los Gráficos, que no es más que una representación esquemática y en capas de lo que se dibuja en dichos gráficos, como lo pueden ser los marcos y los ejes, el texto de los mismos, los títulos, así como, por supuesto, los datos o la información que se grafica, el tipo de gráfico que se utiliza, los colores, los símbolos y tamaños, entre otros. TeachingSampling, este paquete permite al usuario extraer muestras probabilísticas y hacer inferencias a partir de una población finita basada en varios diseños de muestreo. Entre los diseño empleados en esta librería están: Muestreo Aleatorio Simple (MAS), Muestreo Bernoullí, Muestreo Sistemático, PiPT, PPT, estre otros. samplesize4surveys, este paquete permite calcular el tamaño de muestra requerido para la estimación de totales, medias y proporciones bajo diseños de muestreo complejos. Antes de poder utilizar las diferentes funciones que cada librería tiene, es necesario descargarlas de antemano de la web. El comando install.packages permite realizar esta tarea. Note que algunas librerías pueden depender de otras, así que para poder utilizarlas es necesario instalar también las dependencias. install.packages(&quot;dplyr&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;readstata13&quot;) install.packages(&quot;survey&quot;) install.packages(&quot;srvyr&quot;) install.packages(&quot;ggplot2&quot;) install.packages(&quot;TeachingSampling&quot;) install.packages(&quot;samplesize4surveys&quot;) Una vez instaladas las librerías hay que informarle al software que vamos a utilizarlas con el comando library. Recuerde que es necesario haber instalado las librerías para poder utilizarlas. rm(list = ls()) library(&quot;dplyr&quot;) library(&quot;tidyverse&quot;) library(&quot;readstata13&quot;) library(&quot;survey&quot;) library(&quot;srvyr&quot;) library(&quot;ggplot2&quot;) library(&quot;TeachingSampling&quot;) library(&quot;samplesize4surveys&quot;) "],["cración-de-proyectos-en-r.html", "3.3 Cración de proyectos en R", " 3.3 Cración de proyectos en R Una vez se descargan e instalan las librerías o paquetes en R el paso siguientes es crear proyectos. Un proyecto de R se define como un archivo que contiene los archivos de origen y contenido asociados con el trabajo que se está realizando. Adicionalmente, contiene información que permite la compilación de cada archivo de R a utilizar, mantiene la información para integrarse con sistemas de control de código fuente y ayuda a organizar la aplicación en componentes lógicos. Ahora bien, por una cultura de buenas practicas de programación, se recomienda crear un proyecto en el cual se tenga disponible toda la información a trabajar. A continuación, se muestran los pasos para crear un proyecto dentro de RStrudio. Paso 1: Abrir RStudio. Paso 2: ir a file -&gt; New Project Paso 3: Tipos de proyecto. Para este ejemplo se tomará New Directory Tipos de proyectos Algo a tener en cuenta en este paso es que en New Directory RStudio brinda una variedad de opciones dependiendo las características del procesamiento que desea realizar. Ahora bien, si se cuenta con algunos código previamente desarrollados y se desea continuar con ese proyecto, se debe tomar la opción Existing Directory . Por último, Si se cuenta con cuenta en Git y se desea tener una copia de seguridad, se debe emplear la opción Version Control. Paso 4: Seleccionar el tipo de proyecto. Seleccionar el tipo de proyecto Paso 5: Diligenciar el nombre del proyecto y la carpeta de destino. Nombre de proyecto Al realizar esto pasos permite que todas rutinas creadas dentro del proyecto estén ancladas a la carpeta del proyecto. "],["lectura-de-las-bases-de-datos-y-manipulación.html", "3.4 Lectura de las bases de datos y manipulación", " 3.4 Lectura de las bases de datos y manipulación Es muy usual que al trabajar proyectos en R sea necesario importar bases de datos con información relevante para un estudio en particular. En Colombia, por ejemplo, en la Encuesta de Calidad de Vida (ECV, por sus siglas) es necesario, una vez se realiza el trabajo de campo, importar la información recolectada para poder ajustar los factores de expansión y posteriormente estimar los parámetros. Los formatos de bases de datos que R permite importar son diversos, entre ellos se tienen xlsx, csv, txt, STATA, etc. Particularmente, para la lectura de bases de datos provenientes de STATA 13 se realiza con la función read.dta13. Una vez leída la base de datos en el formato mencionado anteriormente se procede a transformar en el formato .RDS el cual es un formato más eficiente y propio de R. Para ejemplificar los procedimientos en R se utilizará la base de datos de Pesquisa Nacional por Amostra de Domicílios 2015 de Brasil la cual está en formato .dta el cual se lee en R con la función read.dta13. Posteriormente se transformará al formato .rds con la función saveRDS el cual es un formato propio de R y por último se cargar esta base. Lo pasos anteriores se realiza como sigue: Primero se carga la base en formato dta con la librería read.dta13 y se guarda en formato rds con la función saveRDS ` data1 &lt;- read.dta13(&quot;Z:/BC/BRA_2015N.dta&quot;) saveRDS(data1, &quot;../data/BRA_2015N.rds&quot;) Una vez guardada la base en nuestros archivos de trabajo, se procede a cargar la base a R con la función readRDS para poder utilizar toda la información que en ella se contiene. data2 &lt;- readRDS(&quot;Data/BRA_2015N.rds&quot;) Una vez cargada la base de datos en R ésta se puede empezar a manipular según las necesidades de cada investigador. En este sentido, una de las primeras revisiones que se realizan al cargar las bases de datos es revisar su dimensión, es decir, chequear la cantidad de filas y columnas que tenga la base. Lo anterior se puede hacer con la función nrow. Dicha función identifica el número de registros (unidades efectivamente medidas) en la base de datos y la función ncol muestra el número de variables en la base de datos. Los códigos computacionales son los siguientes: nrow(data2) ## [1] 356904 ncol(data2) ## [1] 109 Una forma resumida de revisar la cantidad de filas y columnas que tiene la base de datos es usar la función dim. Esta función nos devuelve un vector indicado en su primera componente la cantidad de fila y en su segundo la cantidad de columnas como se muestra a continuación: dim(data2) ## [1] 356904 109 Es usual que en las encuestas de hogares las bases de datos sean muy extensas, es decir, contengan una cantidad importante de variables medidas (filas) y por lo general, el tamaño de la muestra de estos estudios con grandes. Es por lo anterior que, para poder visualizar dichas bases una vez cargadas en R, es necesario hacerlo de manera externa. Esto es, abrir una pestaña diferente en R y hacer la navegación de la base como un texto plano. Lo anterior se realiza con la función View como se muestra a continuación: View(data2) Visor de bases de datos de RStudio Otro chequeo importante que se debe realizar al momento de cargar una base de datos en R es el reconocimiento de las variables que incluye. Esto se puede hacer utilizando la función names la cual identifica las variables de la base de datos. names(data2) La función names solo devuelve un vector un vector con los nombres de las variables que contiene la base. Sin embargo, si se quiere profundizar en qué información contiene cada variable, La función str muestra de manera compacta la estructura de un objeto y sus componentes. Para nuestra base se utilizaría de la siguiente manera: str(data2) Como se puede observar en la salida anterior, por ejemplo, la variable id_hogar es de tipo Entero al igual que id_pers mientras que cotiza_ee es un factor con 2 niveles. Como se observa, esta función es muy útil al momento de querer tener un panorama amplio del contenido y clase de cada variable en una base de datos, particularmente, en una encuesta de hogares en donde se tiene, por la misma estructura del estudio, muchas clases o tipos de variables medidas. "],["el-operador-pipe.html", "3.5 El operador pipe", " 3.5 El operador pipe El software estadístico R es un lenguaje de programación creado por estadísticos para estadísticos. Una de las contribuciones recientes es el desarrollo de los pipelines que permiten de una forma intuitiva generar consultas y objetos desde una base de datos. El operador pipe, %&gt;%, viene del paquete magrittr (Bache, S. et al., 2022) y está cargado automáticamente en los paquetes del Tidyverse. El objetivo del operador pipe es ayudar a escribir código de una manera que sea más fácil de leer y entender. En este sentido, el operador %&gt;% permite “encadenar” operaciones en el sentido que el resultado de una operación anterior se convierta en el input de la siguiente operación. A continuación, ejemplificaremos el uso del %&gt;% en la base de datos de Brasil haciendo un conteo del total de elementos que contiene la base de datos utilizando la función count. data2 %&gt;% count() ## n ## 1 356904 Otra operación que se puede realizar en R es re-codificar los niveles de los factores que en muchas ocasiones son necesarios en las encuestas de hogares. El siguiente código permite generar los nombres de los estados en Brasil. data2$estados &lt;- factor(data2$uf, levels = c(11:17, 21:29, 31:33, 35, 41:43, 50:53), labels = c(&quot;Rondonia&quot;, &quot;Acre&quot;, &quot;Amazonas&quot;, &quot;Roraima&quot;, &quot;Para&quot;, &quot;Amapa&quot;, &quot;Tocantins&quot;, &quot;Maranhao&quot;, &quot;Piaui&quot;, &quot;Ceara&quot;, &quot;RioGrandeNorte&quot;, &quot;Paraiba&quot;, &quot;Pernambuco&quot;, &quot;Alagoas&quot;, &quot;Sergipe&quot;, &quot;Bahia&quot;, &quot;MinasGerais&quot;, &quot;EspirituSanto&quot;, &quot;RioJaneiro&quot;, &quot;SaoPaulo&quot;, &quot;Parana&quot;, &quot;SantaCatarina&quot;, &quot;RioGrandeSur&quot;, &quot;MatoGrossoSur&quot;, &quot;MatoGrosso&quot;, &quot;Goias&quot;, &quot;DistritoFederal&quot;)) Adicionalmente, para efectos de visualización en tablas y gráficos es conviene codificar los nombres de las variables. Para este ejemplo, se codificarán de la siguiente manera: data2$deptos &lt;- factor(data2$uf, levels = c(11:17, 21:29, 31:33, 35, 41:43, 50:53), labels = c(&quot;RO&quot;, &quot;AC&quot;, &quot;AM&quot;, &quot;RR&quot;, &quot;PA&quot;, &quot;AP&quot;, &quot;TO&quot;, &quot;MA&quot;, &quot;PI&quot;, &quot;CE&quot;, &quot;RN&quot;, &quot;PB&quot;, &quot;PE&quot;, &quot;AL&quot;, &quot;SE&quot;, &quot;BA&quot;, &quot;MG&quot;, &quot;ES&quot;, &quot;RJ&quot;, &quot;SP&quot;, &quot;PR&quot;, &quot;SC&quot;, &quot;RS&quot;, &quot;MS&quot;, &quot;MT&quot;, &quot;GO&quot;, &quot;DF&quot;)) Por otro lado, existe una gama amplia de funciones que se pueden utilizar con el operador %&gt;%, A continuación, se enlistan una serie de funciones muy útiles al momento de hacer análisis con bases de datos provenientes de encuestas de hogares: filter: mantiene un criterio de filtro sobre alguna variable o mezcla de variables. select: selecciona columnas por nombres. arrange: ordena las filas de la base de datos. mutate: añade nuevas variables a la base de datos. summarise: reduce variables a valores y los presenta en una tabla. group_by: ejecuta funciones y agrupa el resultado por las variables de interés. Ejemplificando alguna de las funciones mostradas anteriormente, una de las primeras consultas que se realizan en las encuestas de hogares es saber el número de encuestas (personas) realizadas y que están contenida en la base de datos. Usando %&gt;% se realiza de la siguiente manera: data2 %&gt;% count() ## n ## 1 356904 Otro de los ejercicios que se hacen usualmente con las encuestas de hogares está relacionado con saber la cantidad de hogares que hay en el país de estudio. Una de las formas más sencillas de hacer esta revisión es usar la función filter. Las encuestas de hogares muchas veces recopilan información a nivel de viviendas, hogares y personas. Particularmente, las bases de datos que están disponibles en BADEHOG están a nivel de persona. Ahora bien, para saber la cantidad de hogares que se encuestaron basta con filtrar por hogar porque sólo hay un jefe de hogar por hogar, como se muestra a continuación: datahogar1 &lt;- data2 %&gt;% filter(parentco == 1) datahogar2 &lt;- data2 %&gt;% filter(paren_ee == &quot;Jefe&quot;) Por otro lado, si el interés ahora es filtrar la base de datos por la ubicación de la persona en el área rural y urbana se realiza de la siguiente manera: dataurbano &lt;- data2 %&gt;% filter(area_ee == &quot;Area urbana&quot;) datarural &lt;- data2 %&gt;% filter(area_ee == &quot;Area rural&quot;) En este mismo sentido, si el objetivo ahora es filtrar la base de datos por algunos ingresos particulares mensuales por personas, por ejemplo, altos o bajos, se realiza de la siguiente manera: dataingreso1 &lt;- data2 %&gt;% filter(ingcorte %in% c(50, 100)) dataingreso2 &lt;- data2 %&gt;% filter(ingcorte %in% c(1000, 2000)) Otra función muy útil en el análisis en encuestas de hogares es la función select la cual, como se mencionó anteriormente permite seleccionar un grupo de variables de interés a analizar. Si por ejemplo, se desea seleccionar de la base de ejemplo solo las variables identificación del hogar (id_hogar), unidades primarias de muestreo (_upm), factores de expansión (_feh) y estratos muestrales ( _estrato) se realiza de la siguiente manera: datared &lt;- data2 %&gt;% select(`id_hogar`, `_upm`, `_feh`, `_estrato`) datablue &lt;- data2 %&gt;% select(id_pers, edad, sexo, ingcorte) La función select no solo sirve para seleccionar variables de una base de datos, también se puede utilizar para eliminar algunas variables de la base de datos que ya no son de interés para el análisis o que simplemente se generaron en la manipulación de la base de datos como variables puentes para realizar algunos cálculos de interés. Por ejemplo, si se desea eliminar de la base de datos de ejemplo las variables identificación del hogar (id_hogar) e identificación de las personas (id_pers) se realiza introduciendo un signo “menos” (-) delante del nombre de la variable como sigue: datagrey &lt;- data2 %&gt;% select(-id_hogar, -id_pers) Por otro lado, si el objetivo ahora en análisis de las encuestas de hogares es ordenar las filas de la base por alguna variable en particular, se utiliza en R la función arrange para realizar esta operación. A continuación, se ejemplifica con la base de datos de ejemplo, cómo se ordena la base de acuerdo con la variable ingcorte: datadog &lt;- datablue %&gt;% arrange(ingcorte) datadog %&gt;% head() ## id_pers edad sexo ingcorte ## 1 1 38 Mujer 0 ## 2 2 12 Mujer 0 ## 3 1 26 Hombre 0 ## 4 2 29 Mujer 0 ## 5 1 50 Hombre 0 ## 6 1 53 Mujer 0 Es posible utilizar la función arrange para hacer ordenamientos más complicados. Por ejemplo, ordenar por más de una variable. A modo de ejemplo, ordenemos la base de datos datablue de acuerdo con las variables sexo y edad datablue %&gt;% arrange(sexo, edad) %&gt;% head() ## id_pers edad sexo ingcorte ## 1 6 0 Hombre 660.4400 ## 2 6 0 Hombre 162.5000 ## 3 3 0 Hombre 381.6667 ## 4 5 0 Hombre 320.0000 ## 5 6 0 Hombre 375.0000 ## 6 4 0 Hombre 1425.0000 También es posible utilizar la función arrange junto con la opción desc() para que el ordenamiento sea descendente. datablue %&gt;% arrange(desc(edad)) %&gt;% head() ## id_pers edad sexo ingcorte ## 1 2 115 Mujer 103.0000 ## 2 4 110 Mujer 1156.5300 ## 3 2 107 Hombre 415.5904 ## 4 1 107 Mujer 1754.4600 ## 5 3 105 Mujer 380.7904 ## 6 2 105 Mujer 898.3200 "],["funciones-mutate-summarise-y-group_by-en-encuestas-de-hogares.html", "3.6 Funciones mutate, summarise y group_by en encuestas de hogares", " 3.6 Funciones mutate, summarise y group_by en encuestas de hogares Las funciones mutate, summarise y group_by están cargadas en el paquete tidyverse y son muy importantes al momento de realizar análisis en encuestas de hogares. En primer lugar, la función mutate permite computar transformaciones de variables en una base de datos. Usualmente, en las encuestas de hogares es necesario crear nuevas variables, por ejemplo, si el hogar está en estado de pobreza extrema o no la cual se calcula a partir de los ingresos del hogar, la función mutate proporciona una interface clara para realizar este tipo de operaciones. A modo de ejemplo, utilizaremos la base de ejemplo para crear una nueva variable llamada ingreso2 la cual es el doble de los ingresos por persona dentro de un hogar. Los códigos computacionales se muestran a continuación: datablue2 &lt;- datablue %&gt;% mutate(ingreso2 = 2 * ingcorte) datablue2 %&gt;% head() ## id_pers edad sexo ingcorte ingreso2 ## 1 1 23 Hombre 800.0 1600.0 ## 2 1 23 Mujer 1150.0 2300.0 ## 3 1 35 Mujer 904.4 1808.8 ## 4 2 34 Hombre 904.4 1808.8 ## 5 3 11 Mujer 904.4 1808.8 ## 6 4 7 Mujer 904.4 1808.8 No solo se puede crear una nueva variable, si es necesario, se pueden crear más de una variable en la base de datos. Cabe recalcar que la función mutate reconoce sistemáticamente las variables que van siendo creadas de manera ordenada. A continuación, se presenta cómo crear más de una nueva variable en la base de datos: datacat &lt;- datablue %&gt;% mutate(ingreso2 = 2 * ingcorte, ingreso4 = 2 * ingreso2) datacat %&gt;% head() ## id_pers edad sexo ingcorte ingreso2 ingreso4 ## 1 1 23 Hombre 800.0 1600.0 3200.0 ## 2 1 23 Mujer 1150.0 2300.0 4600.0 ## 3 1 35 Mujer 904.4 1808.8 3617.6 ## 4 2 34 Hombre 904.4 1808.8 3617.6 ## 5 3 11 Mujer 904.4 1808.8 3617.6 ## 6 4 7 Mujer 904.4 1808.8 3617.6 Ahora bien, la función summarise funciona de forma similar a la función mutate, excepto que en lugar de añadir nuevas columnas crea un nuevo data frame. Como se mencionó anteriormente esta función sirve para resumir o “colapsar filas”. Toma un grupo de valores como input y devuelve un solo valor; por ejemplo, hallar la media de los ingresos, percentiles o medidas de dispersión. Por otro lado, la función group_by permite agrupar información de acuerdo con una(s) variable(s) de interés. El siguiente código permite generar el número de encuestas efectivas en cada uno de los estados de Brasil. El comando group_by agrupa los datos por estados, el comando summarise hace los cálculos requeridos y el comando arrange ordena los resultados data2 %&gt;% group_by(estados) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) %&gt;% head() ## # A tibble: 6 × 2 ## estados n ## &lt;fct&gt; &lt;int&gt; ## 1 SaoPaulo 40008 ## 2 MinasGerais 32933 ## 3 RioGrandeSur 26259 ## 4 Bahia 26155 ## 5 RioJaneiro 25858 ## 6 Para 22489 Hay otro tipos de análisis que se quieren realizar en encuestas de hogares, por ejemplo, generar el número de encuestas efectivas discriminado por el sexo del respondiente. A continuación, se presenta el código computacional: data2 %&gt;% group_by(sexo) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) ## # A tibble: 2 × 2 ## sexo n ## &lt;fct&gt; &lt;int&gt; ## 1 Mujer 183681 ## 2 Hombre 173223 Si ahora se desea realizar la consulta del número de encuestas efectivas por área geográfica, se realiza de la siguiente manera: data2 %&gt;% group_by(area_ee) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) ## # A tibble: 2 × 2 ## area_ee n ## &lt;fct&gt; &lt;int&gt; ## 1 Area urbana 304564 ## 2 Area rural 52340 Otras consultas que se realizan de manera frecuente en encuestas de hogares es reporta el número efectivo de encuestas clasificado por parentezco (jefe de hogar, hijos, conyugues, etc) data2 %&gt;% group_by(paren_ee) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) ## # A tibble: 6 × 2 ## paren_ee n ## &lt;fct&gt; &lt;int&gt; ## 1 Hijos 126206 ## 2 Jefe 117939 ## 3 Cónyuge 73725 ## 4 Otros parientes 36508 ## 5 Otros no parientes 2342 ## 6 Servicio doméstico 184 "],["medidas-descriptivos-y-reflexiones.html", "3.7 Medidas descriptivos y reflexiones", " 3.7 Medidas descriptivos y reflexiones En estadística, según Tellez Piñerez, C. F., &amp; Lemus Polanía, D. F. (2015) las medidas descriptivas permiten la presentación y caracterización de un conjunto de datos con el fin de poder describir apropiadamente las diversas características presentes en la información de la muestra. Involucra cualquier labor o actividad para resumir y describir los datos univariados o multivariados sin tratar de hacer inferencia más allá de los mismos. Este tipo de análisis son primordiales en cualquier encuesta de hogares dado que, permiten tener una idea inicial del comportamiento de la población en ciertas variables de estudio. A continuación, se presentan las funciones básicas en R para realizar análisis descriptivo. Media: mean() Mediana: median() Varianza: var() Desviación estándar: sd() Percentiles: quantile() Algunas medidas descriptivas: summary() Covarianza: cov( , ) Correlación: cor( , ) Ahora bien, para continuar con lo análisis de las encuestas de hogares es necesario que el lector tenga claro algunos conceptos básicos en el muestreo probabilístico. A continuación, se dan unas definiciones básicas: ¿Qué es una encuesta? Según Groves, R. M., et al (2011) una encuesta es un método sistemático para recopilar información de una muestra de elementos con el propósito de construir descriptores cuantitativos de los parámetros de la población. ¿Qué es una muestra? La definición más básica de una muestra es un subconjunto de la población. Esta definición es muy general dado que, no es específico de si la muestra es representativa de una población o no. ¿Qué es una muestra representativa? Según Gutiérrez (2016) una muestra representativa es un modelo reducido de la población y de aquí se desprende un argumento de validez sobre la muestra. En pocas palabras, se desea que la muestra representativa tenga la cantidad de información suficiente para poder hacer una inferencia adecuada a la población. ¿Está bien sacar conclusiones sobre una muestra? Si la muestra es representativa, las conclusiones que se obtienen de la población utilizando las técnicas de muestreo adecuadas, son correctas. Sin embargo, si se toma una muestra no representativa, no es correcto realizar inferencias dado que estas no representan la realidad de la población. "],["algunas-reflexiones-generales.html", "3.8 Algunas reflexiones generales", " 3.8 Algunas reflexiones generales Como se mencionó anteriormente, antes de realizar los análisis en las encuestas de hogares es necesario hacernos algunas preguntas que nos permiten dar claridad de los análisis que se desean hacer. A continuación, se presentan las preguntas: Si calculamos el promedio de los ingresos en una encuesta, ¿qué significa esa cifra? Esta cifra representa los ingresos medios que reportaron las personas entrevistadas en el estudio. En ningún momento se puede hablar de que este valor representa a la población a la cual queremos hacer inferencia. Para poder realizar las conclusiones a nivel poblacional se deben utilizar los factores de expansión que se obtuvieron empleando el diseño muestral. Si calculamos el total de los ingresos en una encuesta, ¿qué significa esa cifra? Similar a lo anterior, significa los ingresos totales que reportaron los entrevistados en el estudio. Se recalca que, bajo ninguna circunstancia se puede inferir que este valor muestral representa a la población de estudio. ¿Qué necesitamos para que la inferencia sea precisa y exacta? Se requiere de un buen diseño muestral, que la muestra que se recolecte sea representativa de la población en estudio y que el tamaño de muestra sea suficiente para poder inferir en todas las desagregaciones, tanto geográficas como temáticas que se plantearon en el diseño muestral. ¿Qué es el principio de representatividad? La representatividad es la característica más importante de una muestra probabilística, y se define como la capacidad que tiene una muestra de poder representar a la población a la cual se desea hacer inferencia. En este sentido, el muestreo adquiere todo su sentido en cuanto se garantice que las características que se quieren medir en la población quedan reflejadas adecuadamente en la muestra. Cabe resaltar que, una muestra representativa no es aquella que se parece a la población, de tal forma que las categorías aparecen con las mismas proporciones que en la población dado que, en algunas ocasiones es fundamental sobre-representar algunas categorías o incluso seleccionar unidades con probabilidades desiguales para poderlas medir con precisión (Tillé, 2006) ¿Qué es el factor de expansión? Según Guitiérrez (2016) el factor de expansión es el número de elementos menos uno de la población (no incluidos en la muestra) representados por el elemento incluido. También se conoce como el inverso de la probabilidad de inclusión. Dadas las definiciones hechas anteriormente, una encuesta de hogares requiere el análisis de todas las variables que dispuestas en la encuesta. Este proceso debe ser llevado a cabo por separado para asegurar la calidad y consistencia de los datos recolectados. Sin embargo, no vamos a adentrarnos en el análisis de las variables en la muestra, porque los datos muestrales no son de interés para el investigador. El interés se centra en lo que suceda a nivel poblacional y este análisis se debe abordar desde la teoría del muestreo. "],["observación-importante.html", "3.9 ¡Observación importante!", " 3.9 ¡Observación importante! Los siguientes resultados no tienen interpretación poblacional y se realizan con el único propósito de ilustrar el manejo de las bases de datos de las encuestas. "],["medias-y-totales.html", "3.10 Medias y totales", " 3.10 Medias y totales La función summarise permite conocer el total de los ingresos en la base de datos y la media de los ingresos sobre los respondientes. data2 %&gt;% summarise(total.ing = sum(ingcorte), media.ing = mean(ingcorte)) ## total.ing media.ing ## 1 422286293 1183.193 También se puede calcular medias de manera agrupada. Particularmente, si se desea calcular la media de los ingresos por área se hace de la siguiente manera: data2 %&gt;% group_by(area_ee) %&gt;% summarise(n = n(), media = mean(ingcorte)) ## # A tibble: 2 × 3 ## area_ee n media ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Area urbana 304564 1278. ## 2 Area rural 52340 634. Si ahora el análisis de los ingresos se desea hacer por sexo se realiza de la siguiente manera: data2 %&gt;% group_by(sexo) %&gt;% summarise(n = n(), media = mean(ingcorte)) ## # A tibble: 2 × 3 ## sexo n media ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Hombre 173223 1192. ## 2 Mujer 183681 1174. "],["medianas-y-percentiles.html", "3.11 Medianas y percentiles", " 3.11 Medianas y percentiles La función summarise también permite conocer algunas medidas de localización de los ingresos en la base de datos. data2 %&gt;% summarise(mediana = median(ingcorte), decil1 = quantile(ingcorte, 0.1), decil9 = quantile(ingcorte, 0.9), rangodecil = decil9 - decil1) ## mediana decil1 decil9 rangodecil ## 1 732.8571 244.8872 2308.5 2063.613 "],["varianza-desviación-estándar-y-rangos.html", "3.12 Varianza, desviación estándar y rangos", " 3.12 Varianza, desviación estándar y rangos Utilizando la función summarise podemos conocer también el comportamiento variacional de los ingresos sobre los respondientes. data2 %&gt;% summarise(varianza = var(ingcorte), desv = sd(ingcorte)) ## varianza desv ## 1 3407496 1845.94 data2 %&gt;% summarise(mini = min(ingcorte), maxi = max(ingcorte), rango = maxi - mini, rangoiq = IQR(ingcorte)) ## mini maxi rango rangoiq ## 1 0 171000 171000 869.8312 Ahora bien, si se desea realizar el cálculo de la media, la desviación estándar y el rango de los ingresos por hogares, se realiza de la siguiente manera: data2 %&gt;% filter(paren_ee == &quot;Jefe&quot;) %&gt;% group_by(sexoj) %&gt;% summarise(n = n(), media = mean(ingcorte), desv = sd(ingcorte), rangoiq = IQR(ingcorte)) ## # A tibble: 2 × 5 ## sexoj n media desv rangoiq ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Jefe hombre 70154 1456. 2325. 1026. ## 2 Jefa mujer 47785 1334. 2076. 943. y por condicción de ocupación se realizaría: data2 %&gt;% group_by(condact) %&gt;% summarise(n = n(), media = mean(ingcorte), desv = sd(ingcorte), rangoiq = IQR(ingcorte)) ## # A tibble: 4 × 5 ## condact n media desv rangoiq ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -1 22937 764. 1136. 524. ## 2 1 165325 1458. 2191. 1028. ## 3 2 17896 695. 949. 497. ## 4 3 150746 1003. 1527. 706. a nivel de hogar: data2 %&gt;% filter(paren_ee == &quot;Jefe&quot;) %&gt;% group_by(condact) %&gt;% summarise(n = n(), media = mean(ingcorte), desv = sd(ingcorte), rangoiq = IQR(ingcorte)) ## # A tibble: 3 × 5 ## condact n media desv rangoiq ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 77852 1526. 2459. 1096. ## 2 2 4469 535. 778. 441. ## 3 3 35618 1256. 1730. 880. Si se desea hacer un descriptivo a nivel de hogar para el ingreso se realizaría de la siguiente manera: data2 %&gt;% filter(paren_ee == &quot;Jefe&quot;) %&gt;% group_by(pobreza) %&gt;% summarise(n = n(), media = mean(ingcorte), desv = sd(ingcorte), rangoiq = IQR(ingcorte)) ## # A tibble: 3 × 5 ## pobreza n media desv rangoiq ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Pobreza extrema 3918 79.9 52.7 88.9 ## 2 Pobreza no extrema 13688 269. 62.5 107. ## 3 Fuera de la pobreza 100333 1614. 2355. 1055. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
